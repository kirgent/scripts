# main config for all *.sh

#user=zodiac
user=kirill.grushin
if [ -d "$HOME/Desktop" ]; then local_folder="$HOME/Desktop"; elif [ -d "$HOME/cygwin" ]; then local_folder="$HOME/cygwin"; fi

#target_folder="/home/kirill.grushin"
target_folder="/home/kir/cygwin"

# FSP:
# SPB VPN address
#fsp_server=192.168.16.73; fsp_port=22
# NY VPN address
#fsp_server=192.168.16.135; fsp_port=22
# external address
#fsp_server=167.206.135.123; fsp_port=5050
# internal address
fsp_server=10.11.5.200; fsp_port=22
#fsp_server=fsp.developonbox.ru; fsp_port=22

# DVBS:
# SPB VPN address
#dvbs_server=192.168.16.68; dvbs_port=22
# NY VPN address
#dvbs_server=192.168.16.131; dvbs_port=22
# public address
#dvbs_server=167.206.135.123; dvbs_port=5031
# internal address
dvbs_server=10.11.4.200; dvbs_port=22

# ZODIAC:
# SPB VPN address
#zodiac_server=192.168.16.74; zodiac_port=22
# NY VPN address
#zodiac_server=192.168.16.136; zodiac_port=22
# external address
#zodiac_server=167.206.135.123; zodiac_port=5025
# internal address
zodiac_server=10.11.6.200; zodiac_port=22


# NDS:
# internal address
nds_server=10.11.1.200; nds_port=22

# sun_server
sun_server=192.168.23.109; sun_port=22

# spb_server
spb_server=192.168.21.11; spb_port=22

#cooldob_server=cooldob.developonbox.ru; cooldob_port=22
#cooldob_server=167.206.135.18

files=(
$HOME/config.cfg
$HOME/patterns2.txt
$HOME/patterns3.txt
$HOME/auto_reboot_boxes.sh
$HOME/update_autobuild.sh
$HOME/status.sh
$HOME/check_crash.sh
$HOME/check_status.sh
)
########################################################### for ./tests_xxxxxxx.sh
# for fsp/dvbs/zodiac
if [ -x "`which cmd2000`" ]; then cmd=`which cmd2000`; echo "[DBG] config.cfg: cmd2k is found: cmd=$cmd"
elif [ -x "$HOME/cmd2000" ]; then cmd="$HOME/cmd2000"; echo "[DBG] config.cfg: cmd2k is found: cmd=$cmd"
# for sun_server
elif [ -x "$HOME/cygwin/cmd2000" ]; then cmd="$HOME/cygwin/cmd2000"; echo "[DBG] config.cfg: cmd2k is found: cmd=$cmd"
else echo "[WRN] config.cfg: cmd2k is not found! cmd=$cmd".
#exit
fi

var="RemoteKey"

##############################################################################################################
preconditions () {
echo "[DBG] preconditions(): RACK: ${RACK[@]}"
for ip in ${RACK[@]}; do $cmd $ip "autotest:$1"; done
for ip in ${RACK[@]}; do $cmd $ip "console on"; done
for ip in ${RACK[@]}; do $cmd $ip "log set all 6"; done; check_health; sleep 1
for ip in ${RACK[@]}; do $cmd $ip "log_buffer 8192"; done
for ip in ${RACK[@]}; do $cmd $ip "onyxset set block_times"; check_health; done; sleep 1
for ip in ${RACK[@]}; do $cmd $ip "onyxset set blocked_ratings"; done
for ip in ${RACK[@]}; do $cmd $ip "onyxset set blocked_channels"; check_health; done; sleep 1
for ip in ${RACK[@]}; do $cmd $ip "onyxset set block_enable 0"; done
for ip in ${RACK[@]}; do $cmd $ip "pwreg set timeshiftenableddbg 1"; done; check_health; sleep 1
for ip in ${RACK[@]}; do $cmd $ip "pwsrv enum"; done
for ip in ${RACK[@]}; do $cmd $ip "pwsrv channels"; done

for ip in ${RACK[@]}; do $cmd $ip "$var e"; done; check_health
for ip in ${RACK[@]}; do $cmd $ip "$var e"; done; sleep 10
for ip in ${RACK[@]}; do $cmd $ip "$var 2"; done; check_health; sleep 10
}

preconditions2 () {
echo "[DBG] preconditions(): ip=$2"
$cmd $ip "autotest:$1"
$cmd $ip "console on"
$cmd $ip "log set all 6"; check_health; sleep 1
$cmd $ip "log_buffer 8192"
$cmd $ip "onyxset set block_times"; check_health; sleep 1
$cmd $ip "onyxset set blocked_ratings"
$cmd $ip "onyxset set blocked_channels"; check_health; sleep 1
$cmd $ip "onyxset set block_enable 0"
$cmd $ip "pwreg set timeshiftenableddbg 1"; check_health; sleep 1
$cmd $ip "pwsrv enum"
$cmd $ip "pwsrv channels"

$cmd $ip "$var e"; check_health
$cmd $ip "$var e"; sleep 10
$cmd $ip "$var 2"; check_health; sleep 10
}

##############################################################################################################
check_health () {
last_code="$?"
if [ "$last_code" -ne "0" ]; then echo "server date: `date`"; echo "box date:    `TZ='America/New_York' date`";echo "[DBG] check_health(): last_code=$last_code, box is down, exit."; exit; fi
}


##############################################################################################################
get_log () {
ip="$1"
all_ip=($@)
number=`echo "$ip"|cut -d "." -f 4`
log=`ls -lt "$target_folder/"|grep sams"$number"|head -1|awk '{print $NF}'`
echo -e "[DBG] get_log(): ip=$ip\nall_ip=$all_ip\n[DBG] get_log(): number=$number\n[DBG] get_log(): log=$log\n====== ====== ====== ====== ====== ======\n\n"
if [ "$log" == "" ]; then
echo "cannot catch log!!! exit."
exit
fi
sleep 2
}


##############################################################################################################
inject_commands () {
echo "[DBG] inject_commands():"
ip="$1"
$cmd $ip "zs onyx_vod35 app freememory"
}


##############################################################################################################
#check_flashing () {
#echo "[DBG] check_flashing():"
#ip="$1"
##echo "cmd=$cmd, ip=$ip, var=$var, log=$log"
#pattern_after="Starting Supervisor version:"
#pattern_target="smtC5320.*Changed state.*DOWNLOADING"
#
#if [[ `grep -a -E "$pattern_after" $log|tail -1|grep -a -E "$pattern_target"` ]]; then
#echo -e "[DBG] check_flashing(): pattern_target=\" $pattern_target \" is found!!!"
#echo "cmd=$cmd, ip=$ip, var=$var"
##for ip in ${RACK[@]}; do $cmd $ip "$var pwr"; done; sleep 10
#$cmd $ip "$var pwr"
#fi
#}


##############################################################################################################
check_power_status () {
#echo "[DBG] check_power_status():"
ip="$1"
channel="$2"
start_app="$3"
#echo "cmd=$cmd, ip=$ip, var=$var, log=$log"
pattern_after="Power status .* -> (ON|OFF)"
pattern_target="Power status .* -> OFF"
if [[ `grep -a -E "$pattern_after" $log|tail -1|grep -a -E "$pattern_target"` ]]; then
echo -e "[DBG] check_power_status(): last pattern_target=\"Power status .* -> OFF\" is found!\n`grep -a --color=always -nE "$pattern_after" $log|tail -1`"
#echo "cmd=$cmd, ip=$ip, var=$var"
#for ip in ${RACK[@]}; do $cmd $ip "$var pwr"; done; sleep 10
$cmd $ip "$var pwr"; sleep 10
if [ -n "$channel" ]; then
$cmd $ip "$var $channel"; sleep 25; fi
echo -e "[DBG] check_power_status(): last power_status:\n`grep -a --color=always -nE "$pattern_after" $log|tail -1`"

if [ -n "$start_app" ]; then
$cmd $ip "$var $start_app"; sleep 15
fi

else
echo -e "[DBG] check_power_status(): last power_status:\n`grep -a --color=always -nE "$pattern_after" $log|tail -1`"

fi
}



##############################################################################################################
wait_overall_boot_progress () {
#echo "[DBG] wait_overall_boot_progress():"
ip="$1"
get_log "$1"
check_power_status "$1"
pattern_after="Starting Supervisor version:"
pattern_target="overall boot progress 100%"
echo -e "[DBG] wait_overall_boot_progress(): last pattern_after:\n`grep -a --color=always -nE "$pattern_after" $log|tail -n1`"
result=false
while [ "$result" != "true" ]; do
count=`tail -n "+$(grep -a -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log|grep -a -c "$pattern_target"`
if [ "$count" -ne "0" ]; then
result=true
echo -e "[DBG] wait_overall_boot_progress(): last pattern_target:\n`tail -n "+$(grep -a -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log|grep -a --color=always -nE "$pattern_target"|head -n1`"
else
echo "[DBG] wait_overall_boot_progress(): waiting for $pattern_target...sleep 15"
sleep 15
$cmd -silent $ip "dalagent status"; check_health
fi
done
}



##############################################################################################################
wait_activation_timeshift_buffering () {
#echo "[DBG] wait_activation_timeshift_buffering():"
#pattern_after="overall boot progress 100%"
#pattern_target=" activation timeshift buffering"
pattern_after="$1"
pattern_target="$2"
ip="$3"
#echo "cmd=$cmd, ip=$ip, var=$var, log=$log"
echo -e "[DBG] wait_activation_timeshift_buffering(): last pattern_after:\n`grep -a --color=always -nE "$pattern_after" $log|tail -n1`"
result=false
while [ "$result" != "true" ]; do
count=`tail -n "+$(grep -a -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log|grep -a -c "$pattern_target"`
if [ "$count" -ne "0" ]; then
result=true
echo -e "[DBG] wait_activation_timeshift_buffering(): last pattern_target:\n`tail -n "+$(grep -a -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log|grep -a --color=always -nE "$pattern_target"|head -n1`"
else
echo "[DBG] wait_activation_timeshift_buffering(): waiting for $pattern_target...go to the next channel and sleep 25"
#for ip in ${RACK[@]}; do $cmd $ip "$var c+"; done; check_health; sleep 25
#echo "wait_activation_timeshift_buffering(): cmd=$cmd, ip=$ip, var=$var, log=$log"
$cmd -silent $ip "$var c+"; check_health; timestamp=`TZ='America/New_York' date "+%d.%m.%Y %H:%M"`; pattern_after="$timestamp.*key_released"; sleep 25
fi
done
}



##############################################################################################################
check_pattern () {
#echo "[DBG] check_pattern():"
pattern_after="$1"
pattern_target="$2"
ip="$3"
#echo "[DBG] check_pattern(): pattern_after=\"$pattern_after\", pattern_target=\"$pattern_target\", ip=$ip, log=$log"
#echo "1: "
#echo "`tail -n "+$(grep -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log|grep -c "$pattern_target"`"
#echo "1.1: vse logi after number=last string_number of pattern_after in whole log"
#echo "`tail -n "+$(grep -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log`"
#echo "1.2: last string_number of pattern_after in whole log..."
#echo "`grep -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1`"
#echo "1.3: string_numbers of pattern_after in whole log..."
#echo "`grep -nE "$pattern_after" $log|sed 's/:.*//'`"
#echo "1.4: pattern_after in whole log..."
#echo "`grep -nE "$pattern_after" $log`"
result=false
while [ "$result" != "true" ]; do
count=`tail -n "+$(grep -a -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log|grep -a -c "$pattern_target"`
if [ "$count" -eq "0" ]; then
result=true
#echo "no matching, count=$count, result=$result"
else
#echo "there is match!, count=$count, result=$result"
echo "[DBG] check_pattern(): pattern_after=\"$pattern_after\", pattern_target=\"$pattern_target\" is found, ip=$ip, log=$log :"
#echo "[DBG] 0: c+ timestamp=$timestamp, pattern_after=$pattern_after"
#echo "[DBG] 2: pattern_after: \"$pattern_after\""
#echo "`grep --color=always -nE "$pattern_after" $log`"
#echo "[DBG] 2: pattern_after: \"$pattern_after\""
#echo "pattern_after:"
echo "`grep -a --color=always -nE "$pattern_after" $log|tail -n1`"
#echo "pattern_target:"
echo "`tail -n "+$(grep -a -nE "$pattern_after" $log|sed 's/:.*//'|tail -n1)" $log|grep -a -nE --color=always "$pattern_target"|head -n1`"
#for ip in ${RACK[@]}; do $cmd $ip "$var c+"; done; check_health; sleep 25
#echo "check_pattern(): cmd=$cmd, ip=$ip, var=$var, log=$log"
$cmd $ip "$var c+"; check_health; timestamp=`TZ='America/New_York' date "+%d.%m.%Y %H:%M"`; pattern_after="$timestamp.*key_released"; sleep 25
fi
done
#echo "[DBG] check_pattern() exit"
}
